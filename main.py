import logging
import os
from contextlib import asynccontextmanager
from datetime import datetime

from fastapi import FastAPI, Depends, HTTPException, status, APIRouter, Header, Request
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

from src import schemas
from src.DB.database import create_tables, get_db
from src.DB.models import UserOrm
from src.dependencies import get_current_user, get_refresh_token_user
from src.repository import get_user_by_login, create_user, authenticate_user, get_user_by_email

from src.schemas import UserResponse, UserCreate, Token, UserLogin
from src.security import create_token_pair
from starlette.responses import FileResponse

# –î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: "ENVIRONMENT" == "development"
LOG_LEVEL = "DEBUG" if os.getenv("ENVIRONMENT") == "development" else "INFO"
logging.basicConfig(level=LOG_LEVEL, format='...')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

@asynccontextmanager
async def lifespan(app: FastAPI):
    if os.getenv("ENVIRONMENT") == "development":
        await create_tables()
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã (development mode)")
    yield
    print("üõë –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É")
app = FastAPI(
    title="JWT Auth API",
    lifespan=lifespan,
    swagger_ui_parameters={
        "persistAuthorization": True,  # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –º–µ–∂–¥—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞–º–∏
        "tryItOutEnabled": True,       # –í–∫–ª—é—á–∞–µ—Ç –∫–Ω–æ–ø–∫—É "Try it out" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        "displayRequestDuration": True, # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        # "docExpansion": "none",           # –°–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        # "filter": True,                   # –í–∫–ª—é—á–∞–µ—Ç –ø–æ–∏—Å–∫ –ø–æ API
        # "showExtensions": True,           # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        # "showCommonExtensions": True,     # –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç common extensions
    }
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:8000", "http://127.0.0.1:8001"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

main_router = APIRouter(tags=["main"])
header_router = APIRouter(tags=["headers"], prefix="/headers")
user_router = APIRouter(tags=["users"], prefix="/users")

# Main routers
@main_router.get("/health")
async def health():
    return {"status": "ok"}


@main_router.get("/")
async def root():
    return FileResponse("static/index.html")

# !!! Header !!!
# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã–π JSON dict , –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏, –±–µ–∑ message, –±–µ–∑ timestamp
@app.get("/headers/v1")
async def get_headers(
        user_agent: str | None = Header(None, alias="User-Agent"),
        accept_language: str | None = Header(None, alias="Accept-Language")
):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
    if user_agent is None:
        raise HTTPException(
            status_code=400,
            detail="User-Agent header is required"
        )

    if accept_language is None:
        raise HTTPException(
            status_code=400,
            detail="Accept-Language header is required"
        )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    return {
        "User-Agent": user_agent,
        "Accept-Language": accept_language
    }

# –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Pydantic CommonHeaders
# —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ + message + timestamp
@app.get("/headers", response_model=schemas.CommonHeaders)
async def get_headers(
    user_agent: str | None = Header(None, alias="User-Agent"),
    accept_language: str | None = Header(None, alias="Accept-Language")
):
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
    if user_agent is None:
        raise HTTPException(
            status_code=400,
            detail="User-Agent header is required"
        )

    if accept_language is None:
        raise HTTPException(
            status_code=400,
            detail="Accept-Language header is required"
        )

    # 2. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
    final_message = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–∞—à–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã."

    # 3. –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏ —Å–æ –í–°–ï–ú–ò –ø–æ–ª—è–º–∏
    headers = schemas.CommonHeaders(
        user_agent=user_agent,
        accept_language=accept_language,
        message=final_message,
        x_server_time=datetime.now()  # ‚Üê –î–æ–±–∞–≤–ª—è–µ–º timestamp
    )

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ)
    try:
        is_valid = headers.validate_pattern  # ‚Üê –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ!
        if is_valid:
            logger.info("Accept-Language —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É")
        else:
            logger.warning("Accept-Language –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É")
    except ValueError as e:
        logger.warning(f"Accept-Language –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—É: {e}")

    # 5. –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—ä–µ–∫—Ç –º–æ–¥–µ–ª–∏
    return headers

# Users routers
@user_router.post("/auth/register", response_model=UserResponse)
async def register_user(user: UserCreate, db: AsyncSession = Depends(get_db)):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if await get_user_by_email(db, user.email):
        raise HTTPException(status_code=400, detail="Email already registered")
    if await get_user_by_login(db, user.login):
        raise HTTPException(status_code=400, detail="Login already taken")

    user_db = await create_user(db, user)
    return {
        "message": "New user created",
        "user": UserResponse.model_validate(user_db)  # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
    }


@user_router.post("/auth/login", response_model=Token)
async def login_user(user_data: UserLogin, db: AsyncSession = Depends(get_db)):
    user = await authenticate_user(db, user_data.login, user_data.password)
    if not user:
        logger.warning(f"Failed login attempt for: {user_data.login}")
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Incorrect login or password",
        )

    logger.info(f"Successful login for: {user_data.login}")
    return create_token_pair(user.login)


@user_router.post("/auth/refresh", response_model=Token)
async def refresh_token(token_data: Token, db: AsyncSession = Depends(get_db)):
    user = await get_refresh_token_user(token_data.refresh_token, db)
    return create_token_pair(user.username)


@user_router.get("/users/me", response_model=UserResponse)
async def read_users_me(current_user: UserResponse = Depends(get_current_user)):
    return current_user


@user_router.get("/protected")
async def protected_route(current_user: UserResponse = Depends(get_current_user)):
    return {"message": f"Hello {current_user.username}!", "user_id": current_user.id}

@user_router.get("/debug/users")
async def debug_users(db: AsyncSession = Depends(get_db)):
    users = await db.execute(select(UserOrm))
    return [
        {
            "id": u.id,
            "username": u.username,
            "login": u.login,
            "email": u.email
        } for u in users.scalars().all()
    ]

# –î–ª—è middleware, –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
@app.middleware("http")
async def log_requests(request: Request, call_next):
    logger.info(f"Request: {request.method} {request.url}")
    response = await call_next(request)
    logger.info(f"Response: {response.status_code}")
    return response
app.include_router(main_router)
app.include_router(user_router)
app.include_router(header_router)
# myvenv\Scripts\activate
#
# uvicorn main:app --reload

# {
#   "login": "AleKolar_33",
#   "password": "Mn1471979!_Mn"
# }